

<section>
  <title>Finite State Acceptors</title>
  <p>
    Consider a vending machine that only accepts dollar bills and has six snacks,
    each costing one dollar.
    This machine has only six buttons:
    <m>A</m>, <m>B</m>, 1, 2, 3 and <m>D</m>.
    The button <m>D</m> is internal to the machine and is automatically triggered when a dollar bill is inserted.
    The machine has two rows labeled <m>A</m> and <m>B</m> and three columns labeled 1, 2 and 3.
    Each combination <m>A1, B1, A2, B2, A3, B3</m> identifies a snack such as M<ampersand />Ms, Cheetos or Doritoes.
    The instructions read:

    <ol>
      <li>
        <p>
          Insert <dollar />1 (which automatically triggers button <m>D</m>)
        </p>
      </li>

      <li>
        <p>
          Press <m>A</m> or <m>B</m>.
        </p>
      </li>

      <li>
        <p>
          Press <m>1, 2</m> or <m>3</m>.
        </p>
      </li>

      <li>
        <p>
          Press <q>RETURN</q>.
        </p>
      </li>
    </ol>
  </p>

  <p>
    Figure 9.2 shows a transition diagram for an FST <m>M_1</m> to control this machine.
  </p>

  <p>
    \begin{figure}[ht]
  </p>
  <image>
  <latex-image>
    \begin{picture}(100,60)

    \put(65,23){
    \put(0,12){\circle{7}}  \put(-35,12){\circle{7}}  \put(35,12){\circle{7}}  \put(0,-20){\circle{7}}
    \put(-17.5,-6){\circle{7}}  \put(-17.5,12){\circle{7}}  \put(-17.5,30){\circle{7}}
    \put(17.5,-6){\circle{7}}  \put(17.5,12){\circle{7}}  \put(17.5,30){\circle{7}}
    \put(-18.5,-7){\(b3\)}  \put(-18.5,11){\(b2\)}  \put(-18.5,29){\(b1\)}
    \put(15.5,-7){\(a3\)}  \put(15.5,11){\(a2\)}  \put(15.5,29){\(a1\)}

    \put(-32,15){\line(1,1){11}}
    \put(-3,15){\line(-1,1){11}}
    \put(-32,9){\line(1,-1){11}}
    \put(-3,9){\line(-1,-1){11}}

    \put(32,15){\line(-1,1){11}}
    \put(3,15){\line(1,1){11}}
    \put(32,9){\line(-1,-1){11}}
    \put(3,9){\line(1,-1){11}}

    \qbezier(4,-20)(35,-20)(35,8)
    \put(34.5,11.5){\(a\)}  \put(25,-20){\(A / -\)}

    \put(0,8){\line(0,-1){24}}
    \put(-1.2,-16){\td}  \put(-.6,11.5){\(s\)}
    \put(-.8,-20.7){\(d\)}

    \put(-3.5,19){Start}   \put(1,-9){<dollar />\(/ -\)}

    \qbezier(-4,-20)(-35,-20)(-35,8)
    \put(-5.5,7.3){\tl}  \put(-36.2,6){\tu}  \put(-7,11.2){\tr}  \put(-5.5,15){\tl}
    \put(-23,24.8){\tl}  \put(-23,-2.8){\tl}  \put(-24.5,11.2){\tr}
    \put(-5,12){\line(-1,0){8}}  \put(-22.5,12){\line(-1,0){8}}
    \put(-32,22){\(1/-\)} \put(-28,8){\(2/-\)} \put(-31,-1){\(3/-\)}
    \put(-11,25){\(R/B1\)} \put(-14,8){\(R/B2\)} \put(-11,-3){\(R/B3\)}

    \put(2.5,7.3){\tr}  \put(33.8,6){\tu}  \put(4,11.2){\tl}  \put(2.5,15){\tr}
    \put(20,24.8){\tr}  \put(20,-2.8){\tr}  \put(21.5,11.2){\tl}
    \put(5,12){\line(1,0){8}}  \put(22.5,12){\line(1,0){8}}
    \put(27,22){\(1/-\)} \put(23,8){\(2/-\)} \put(26,-1){\(3/-\)}
    \put(4,25){\(R/A1\)} \put(6,8){\(R/A2\)} \put(4,-3){\(R/A3\)}







    \put(-36,11.5){\(b\)}

    \put(-30,-20){\(B / -\)} 

    }


    \end{picture}
  </latex-image>
  <image>
  </figure>

  <p>
    Unfortunately many customers could not follow instructions.
    They would request the treat before inserting the dollar,
    or get the column before the row.
    Not knowing what to do, the machine would stop and do nothing.
    It would get a hard kick, and would do nothing from then on.
    The Tater-Head-Ted's Snack Company that designed the machine was facing bankruptcy.
  </p>

  <problem xml:id="vending">
    <statement>
      <p>
        Seeing the growing evidence of expertise in graph theory on your resum&eacute;, the Company has hired you to help.
        What the Company needs is a separate finite state machine <m>M_2</m> that will answer the question,
        <q>Is the user's sequence of button pushes a valid input?</q> It will have no outputs,
        but will have a start state <m>s</m> and will halt in one of two states,
        <m>y</m> or <m>n</m>,
        depending on whether the answer is <m>Yes</m> or <m>No</m>.
        Draw a transition diagram for this finite state machine.
      </p>
    </statement>
  </problem>

  <p>
    The company can now build the required vending machine by combining <m>M_1</m> and<nbsp /><m>M_2</m>.
    The machine will save the input sequence in memory.
    When the user presses <q>RETURN</q>,
    it will feed a copy of the input sequence to<nbsp /><m>M_2</m>.
    If <m>M_2</m> halts in state <m>y</m>,
    it will then feed a copy of the input sequence to<nbsp /><m>M_1</m>.
    If <m>M_2</m> halts in state <m>n</m>,
    it will display the message, <q>Invalid input.
    Please try again!</q>.
  </p>

  <p>
    The finite state machine <m>M_2</m> you constructed in <xref ref="vending">Problem</xref>
    is not an FST. Rather than exchanging input for output,
    as an FST does, its purpose is to answer the question:
    <q>Did the user give one of the valid inputs specified by the instructions?</q> Alternately,
    the question could be phrased as, ``Did the user input one of the strings in the set
    <me>
      L_2 = \{\dollarDA1, \dollarDA2, \dollarDA3, \dollarDB1, \dollarDB2, \dollarDB3\}?''
    </me>
  </p>

  <p>
    Thus <m>M_2</m> is an example of a different kind of finite state machine and <m>L_2</m> is the language recognized by <m>M_2</m>.
  </p>

  <definition>
    <statement>
      <p>
        A <term>finite state acceptor</term>
        <m>(</m>FSA<m>)</m> is a quintuple <m>\dsp M = \big( \Sigma, Q, s, Y, \delta \big)</m> where

        <ul>
          <li>
            <p>
              <m>\Sigma</m> is a finite set of symbols,
              called the <em>input alphabet</em> of <m>M</m>,
            </p>
          </li>

          <li>
            <p>
              <m>Q</m> is a finite set,
        the <em>internal states</em> of <m>M</m>,
            </p>
          </li>

          <li>
            <p>
              <m>s\in Q</m> is called the
        <em>initial state</em> of <m>M</m>,
            </p>
          </li>

          <li>
            <p>
              <m>Y</m> is a subset of <m>Q</m> called the
              <em>accepting states</em> of <m>M</m>, and
            </p>
          </li>

          <li>
            <p>
              <m>\delta: Q\times\Sigma \to Q</m> is called the
              <em>state transition function</em> of <m>M</m>.
            </p>
          </li>
        </ul>
      </p>
    </statement>
  </definition>

  <p>
    Like FSTs, FSAs are illustrated by labeled directed graphs.
    The vertices of the graph are the states of <m>Q</m>,
    and there is a labeled arrow for each state <m>q\in Q</m> and each symbol <m>a\in \Sigma</m>.
    Knowing that <m>\delta(q,a) = r</m> tells us that when our FSA <m>M</m> is already in state <m>q</m> and reads the input symbol <m>a</m>,
    it will go into state <m>r\in Q</m>.
    We illustrate this using this diagram.
  </p>
  <image>
  <latex-image>
    \begin{picture}(50,30)(-70,0)
    \put(19,-2){
    \put(-40,15){\circle{6}} \put(-20,15){\circle{6}}
    \put(-31,18){\(a\)} \put(-41,14){\(q\)} \put(-21,14){\(r\)} \put(-35,15){\line(1,0){10}} \put(-27,14){\tr}
    }
    \end{picture}
  </latex-image>
  <image>
  <p>
    Because an input to <m>M</m> will be a string of symbols,
    we define <m>\Sigma^*</m> as the set of all finite strings of symbols from <m>\Sigma</m>.
    This includes the <em>empty string</em>,
    which is denoted by<nbsp /><m>\lambda</m>.
    Since the transition function <m>\delta</m> can only handle one input from our alphabet at a time,
    we extend
    <m>\delta</m> recursively to a function
    <me>
      \delta^*:Q\times\Sigma^* \to Q
    </me>
    by defining

    <ol>
      <li>
        <p>
          <m>\delta^*(q,\lambda)=q</m> and
          <m>\delta^*(q,a)= \delta(q,a)</m> for <m>a\in \Sigma</m>,
        </p>
      </li>

      <li>
        <p>
          <m>\delta^*(q,au) =\delta^*(\delta(q,a),u)</m> for
          <m>a\in \Sigma</m>, <m>u\in \Sigma^*</m>.
        </p>
      </li>
    </ol>
  </p>

  <p>
    For example,
    if <m>q\in Q</m> and <m>a,b,c\in \Sigma</m>, then we have
    <me>
      \delta^*(q,abc)=\delta^*(\delta(q,a),bc) =
      \delta^*(\delta(\delta(q,a),b),c) = \delta(\delta(\delta(q,a),b),c)
    </me>.
  </p>
  <image>
  <latex-image>
    \begin{picture}(50,30)(-70,0)
    \put(-40,15){\circle{6}} \put(-20,15){\circle{6}}
    \put(0,15){\circle{6}} \put(20,15){\circle{6}}
    \put(-41,14){\(q\)} \put(-31,18){\(a\)} \put(-11,18){\(b\)} \put(9,18){\(c\)}
    \put(-35,15){\line(1,0){10}} \put(-27,14){\tr}
    \put(-15,15){\line(1,0){10}} \put(-7,14){\tr}
    \put(5,15){\line(1,0){10}}   \put(13,14){\tr}
    \end{picture}
  </latex-image>
  <image>
  <p>
    When the machine <m>M</m> is started by the user,
    its job will be to read a string <m>w</m> of symbols from <m>\Sigma</m> and either accept or reject it.
    If <m>M</m> begins in its initial state <m>s</m> and reads the string <m>w\in \Sigma^*</m>,
    then <m>\delta^*(s,w)</m> is the state it will be in when it reaches the end of <m>w</m> and halts.
    We say that <m>M</m> <em>accepts</em>
    the string <m>w</m> if <m>\delta^*(s,w)\in Y</m> (the set of accepting or <q>Yes</q> states);
    otherwise we say that <m>M</m>
    <em>rejects</em> <m>w</m>.
    These ideas lead to the following definitions.
  </p>

  <definition>
    <statement>
      <p>
        For a finite alphabet <m>\Sigma</m>,
        a <term>language</term> over <m>\Sigma</m> is a subset of <m>\Sigma^*</m>.
      </p>
    </statement>
  </definition>

  <definition>
    <statement>
      <p>
        If <m>M</m> is an FSA, then the set
        <me>
          L = \{w\in \Sigma^* \mid \delta^*(s,w)\in Y\}
        </me>
        consisting of all strings accepted by <m>M</m> is called
        <term>the language recognized by</term> <m>M</m>.
      </p>
    </statement>
  </definition>

  <p>
    In practice we often find that,
    after reading only part of a string,
    we can be certain that it will be rejected regardless of what follows.
    In these cases it is useful to specify a <em>dead state</em>
    which is non-accepting and cannot be exited.
    We will use the letter <q><m>z</m></q> to denote a dead state.
    Since there may be many arrows going to <m>z</m>,
    we follow the convention that undrawn arrows are intended to go to<nbsp /><m>z</m>.
  </p>

  <example xml:id="ex_L3">
    <statement>
      <p>
        Draw an FSA <m>M_3</m> that recognizes the language <m>L_3</m> consisting of exactly those words that contain only the letters from the input alphabet <m>\Sigma = \{a,b,c\}</m>,
        begin with <m>a</m> and end with <m>c</m>.
        EXTRA<fn>I use this example as a classroom exercise and have them draw an FSA at their desk while I circulate.
        After a few minutes, I draw one of the attempts on the board, talk about the difference between FSTs and FSAs, point out that FSA's have only one alphabet (no output alphabet), at least one accepting state, and a dead state <m>z</m> if it is needed.</fn></p>
    </statement>
  </example>

  <problem xml:id="prob_L4">
    <statement>
      <p>
        Draw an FSA <m>M_4</m> that recognizes the language <m>L_4</m> consisting of exactly those words that contain the letters from the input alphabet <m>\Sigma = \{a,b,c,d\}</m>,
        begin with <m>ab</m>, and end with <nbsp /><m>b</m>.
      </p>
    </statement>
  </problem>

  <figure xml:id="fig_M5">
    <caption>A finite state acceptor <m>M_5</m>.</caption>
    <image>
    <latex-image>
      \begin{picture}(60,28)(-60,-15)
      \put(-30,10){\circle{6}}\put(-31,9.5){\(u\)}
      \put(-30,-10){\circle{6}}\put(-31,-10.5){\(w\)}
      \put(-10,0){\circle{6}}\put(-11,-.5){\(s\)}
      \put(10,0){\circle{6}}\put(9,-.5){\(v\)}
      \put(30,10){\circle{6}}\put(30,10){\circle{4.5}} \put(29,9.5){\(x\)}
      \put(30,-10){\circle{6}}\put(29,-10.5){\(y\)}
      \put(0,-10){\circle{6}}\put(-1,-10.5){\(z\)}
      \qbezier(10,5)(10,10)(25,10) \put(23,9){\tr}  \put(15,5){2}
      \qbezier(-10,5)(-10,10)(-25,10) \put(-26,9){\tl} \put(-18,5){0}
      \qbezier(-10,-5)(-10,-10)(-25,-10) \put(-11.2,-6){\tu} \put(-18,-8){0}
      \qbezier(10,-5)(10,-10)(25,-10) \put(23,-11){\tr} \put(15,-8){1}
      \put(-5,0){\line(1,0){10}} \put(3,-1){\tr} \put(-1,1){\(1\)}
      \put(30,-5){\line(0,1){10}} \put(28.8,3){\tu} \put(28.8,-6){\td}
      \put(32,-1){0}
      \put(-30,-5){\line(0,1){10}} \put(-31.2,-6){\td} \put(-32.5,-1){0}
      \qbezier(35,9)(40,8)(40,10) \qbezier(35,11)(40,12)(40,10)
      \put(34.5,10){\tl} \put(42,9){2} 
      \qbezier(-35,9)(-40,8)(-40,10) \qbezier(-35,11)(-40,12)(-40,10)
      \put(-37,10){\tr} \put(-46,9){1,2}
      \qbezier(-35,-9)(-40,-8)(-40,-10)
      \qbezier(-35,-11)(-40,-12)(-40,-10) \put(34.5,-10){\tl}
      \put(-46,-10.5){1,2}
      \qbezier(35,-9)(40,-8)(40,-10) \qbezier(35,-11)(40,-12)(40,-10)
      \put(-37,-10){\tr} \put(42,-11){1} 
      \qbezier(-15,1)(-20,2)(-20,0) \qbezier(-15,-1)(-20,-2)(-20,0)
      \put(-17,0){\tr} \put(-23,-1){2}

      \end{picture}
    </latex-image>
    <image>
  </figure>

  <problem>
    <statement>
      <p>
        Consider the FSA <m>M_5</m> illustrated in <xref ref="fig_M5">Figure</xref>.
        Here <m>s</m> is the start state,
        <m>x</m> <m>(</m>indicated with a double circle<m>)</m> is the only accepting state,
        and all undrawn arrows go the the <sq>dead</sq> state <m>z</m>.
        Let <m>\Sigma = \{0,1,2\}</m> and list three strings in
        <m>\Sigma^*</m> that are accepted by <m>M_5</m> and three strings that are not accepted by <m>M_5</m>.
      </p>
    </statement>
  </problem>

  <problem xml:id="prob_L6">
    <statement>
      <p>
        Draw an FSA <m>M_6</m> that recognizes the language <m>L_6</m> consisting of exactly those words that contain only the letters from the input alphabet
        <m>\Sigma = \{a,b,c\}</m>, begin with <m>a</m>,
        contain exactly one <m>b</m> and end with <m>c</m>.
      </p>
    </statement>
  </problem>

  <problem xml:id="prob_L7">
    <statement>
      <p>
        Draw an FSA <m>M_7</m> that recognizes the language <m>L_7</m> consisting of exactly those words that contain only the letters from the input alphabet
        <m>\Sigma = \{a,b,c,d\}</m>, begin with <m>a</m>,
        contain at least one <m>b</m> and end with <m>cd</m>.
      </p>
    </statement>
  </problem>

  <problem xml:id="prob_L8">
    <statement>
      <p>
        Let <m>\Sigma = \{1,2,3,4\}</m>.
        Construct an FSA <m>M_8</m> that will answer the question,
        <q>Does <m>w \in \Sigma^*</m> begin with <m>12</m>,
        contain exactly four <m>3</m>'s, and end with<nbsp /><m>4</m>?</q>
      </p>
    </statement>
  </problem>

  <definition>
    <statement>
      <p>
        If <m>a</m> is a character in our input alphabet and <m>n</m> is a positive integer,
        then <m>a^n</m> is the string consisting of <m>a</m> repeated <m>n</m> times.
        I.e. <m>a^3=aaa</m>.
      </p>
    </statement>
  </definition>

  <problem>
    <statement>
      <p>
        Let <m>\Sigma = \{a,b\}</m>.
        Draw an FSA <m>M_{9}</m> that recognizes the language <m>L_{9} = \{a^nb^n \mid n = 1, 2, 3 \}</m>.
      </p>
    </statement>
  </problem>

  <problem>
    <statement>
      <p>
        Are the commas in <xref ref="prob_L10">Problem</xref> necessary?
        EXTRA<fn>This always leads to an interesting discussion about the importance of the careful use of grammar.
        At some point,
        should not all students be convinced of the necessity of the commas, I reduce the issue to a single question.
        Is there a difference between <q>Let's eat, Grandma.</q> and <q>Let's eat Grandma.</q>?</fn></p>
    </statement>
  </problem>

  <problem xml:id="prob_L10">
    <statement>
      <p>
        Construct an FSA <m>M_{10}</m> that recognizes the language consisting of all strings that are either

        <ol>
          <li>
            <p>
              a positive multiple of three Cs, followed by either an empty string or a string of As and Bs or
            </p>
          </li>

          <li>
            <p>
              a positive multiple of two Ds, followed by either an empty string or a string of Bs and Cs.
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </problem>

  <problem xml:id="L__">
    <statement>
      <p>
        Let <m>\Sigma = \{a,b\}</m>.
        Is there an FSA that will recognize the language <m>L = \{a^nb^n \mid n = 1,2,3,\dots\}</m>?
        If so, draw it.
        If not, why not?
      </p>
    </statement>
  </problem>
</section>

